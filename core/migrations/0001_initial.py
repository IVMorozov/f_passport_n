# Generated by Django 5.2.1 on 2025-08-31 12:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=200, verbose_name='Субъект РФ')),
                ('mo2', models.CharField(max_length=200, verbose_name='Муниципальное образование')),
                ('population', models.PositiveIntegerField(help_text='Численность населения', verbose_name='Население')),
                ('href', models.URLField()),
                ('path_class', models.CharField(max_length=200, verbose_name='Техническое поле')),
                ('path_d', models.TextField(blank=True, verbose_name='Координаты')),
                ('path_fill', models.CharField(max_length=200, verbose_name='цвет заполнения')),
                ('path_description_data_img', models.ImageField(blank=True, upload_to='MO/', verbose_name='Изображение МО')),
                ('path_description_data', models.TextField(blank=True, verbose_name='Описание')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('image', models.ImageField(blank=True, upload_to='services/', verbose_name='Изображение')),
            ],
            options={
                'verbose_name': 'Услугу',
                'verbose_name_plural': 'Список услуг',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='StatisticsShort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('MO2', models.TextField(verbose_name='Муниципальное образование второго уровня')),
                ('MO1', models.TextField(verbose_name='Муниципальное образование первого уровня')),
                ('F', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Коэффициент финансовой доступности')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст отзыва/предложения')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 'Ужасно'), (2, 'Плохо'), (3, 'Нормально'), (4, 'Хорошо'), (5, 'Отлично')], verbose_name='Оценка')),
                ('is_published', models.BooleanField(default=True, verbose_name='Опубликован')),
                ('ai_checked_status', models.CharField(choices=[('ai_checked_true', 'Проверено ИИ'), ('ai_cancelled', 'Отменено ИИ'), ('ai_checked_in_progress', 'В процессе проверки'), ('ai_checked_false', 'Не проверено')], default='ai_checked_false', max_length=30, verbose_name='Статус ИИ')),
                ('MO', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.mo', verbose_name='МО')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service', to='core.service', verbose_name='вид сервиса')),
            ],
            options={
                'verbose_name': 'Отзыв/предложение',
                'verbose_name_plural': 'Список отзывов/предложений',
            },
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.TextField(verbose_name='Округ')),
                ('MO2', models.TextField(verbose_name='Муниципальное образование второго уровня')),
                ('MO1', models.TextField(verbose_name='Муниципальное образование первого уровня')),
                ('NNP', models.TextField(verbose_name='Наименование населенного пункта')),
                ('OKTMO', models.TextField(verbose_name='ОКТМО')),
                ('CHN', models.DecimalField(decimal_places=2, help_text='Численность населения', max_digits=10, verbose_name='Население')),
                ('GO', models.PositiveSmallIntegerField(verbose_name='Головной офис')),
                ('FL', models.PositiveSmallIntegerField(verbose_name='Филиал')),
                ('VSP', models.PositiveSmallIntegerField(verbose_name='Внутренние структурные подразделения (дополнительные офисы)')),
                ('PPKO', models.PositiveSmallIntegerField(verbose_name='Мобильный офис')),
                ('UTO', models.PositiveSmallIntegerField(verbose_name='Удаленные точки обслуживания с работником КО, отличные от окон АО «Почта Банк» в отделениях почтовой связи формата «ОПС Б»')),
                ('OPSB', models.PositiveSmallIntegerField(verbose_name='Количество ОПС с окнами ОПС Б')),
                ('OPSP1', models.PositiveSmallIntegerField(verbose_name='Количество ОПС с окнами ОПС П1')),
                ('OPSS', models.PositiveSmallIntegerField(verbose_name='Количество ОПС с окнами ОПС С')),
                ('OPSP2', models.PositiveSmallIntegerField(verbose_name='Количество ОПС с окнами ОПС П2')),
                ('SOPS', models.PositiveSmallIntegerField(verbose_name='Стационарное отделение организации федеральной почтовой связи ')),
                ('POPS', models.PositiveSmallIntegerField(verbose_name='Передвижное отделение организации федеральной почтовой связи')),
                ('MOB', models.PositiveSmallIntegerField(verbose_name='Мобильные менеджеры кредитных организаций')),
                ('BKKO_NViNPiBO', models.PositiveSmallIntegerField(verbose_name='Банкоматы КО типа БК c одновременным наличием функций НВ, НП и БО ')),
                ('BKBPA_NViNPiBO', models.PositiveSmallIntegerField(verbose_name='Банкоматы БПА (субагентов) типа БК c одновременным наличием функций НВ, НП и БО ')),
                ('BKKO_NViBO_NP', models.PositiveSmallIntegerField(verbose_name='Банкоматы КО типа БК с функциями НВ и БО, но без функции НП')),
                ('BKKO_NViNP_BO', models.PositiveSmallIntegerField(verbose_name='Банкоматы КО типа БК с функциями НВ и НП, но без функции БО')),
                ('BKBPA_NViBO_NP', models.PositiveSmallIntegerField(verbose_name='Банкоматы БПА типа БК с функциями НВ и БО, но без функции НП')),
                ('BKBPA_NViNP_BO', models.PositiveSmallIntegerField(verbose_name='Банкоматы БПА типа БК с функциями НВ и НП, но без функции БО')),
                ('BKKO_NV', models.PositiveSmallIntegerField(verbose_name='Банкоматы КО типа БК с функцией НВ, при этом функции НП и БО отсутствуют')),
                ('BKBPA_NV', models.PositiveSmallIntegerField(verbose_name='Банкоматы БПА (субагентов) типа БК с функцией НВ, при этом функции НП и БО отсутствуют')),
                ('BKKO', models.PositiveSmallIntegerField(verbose_name='Банкоматы КО типа БК без функции НВ, но с функцией НП и с функцией БО')),
                ('BKBPA', models.PositiveSmallIntegerField(verbose_name='Банкоматы БПА (субагентов) типа БК без функции НВ, но с функцией НП и с функцией БО')),
                ('BKKO_1', models.PositiveSmallIntegerField(verbose_name='Банкоматы КО типа БК без функции НВ и без функции НП, но с функцией БО (платежные терминалы)')),
                ('BKBPA_1', models.PositiveSmallIntegerField(verbose_name='Банкоматы БПА (субагентов) типа БК без функции НВ и без функции НП, но с функцией БО (платежные терминалы)')),
                ('BPKO', models.PositiveSmallIntegerField(verbose_name='Банкоматы КО типа БП и иные банкоматы БК без НВ и БО, при этом устройства только с НЮ не учитываются')),
                ('BPBPA', models.PositiveSmallIntegerField(verbose_name='Банкоматы БПА (субагентов) типа БП и иные банкоматы БК без НВ и БО, при этом устройства только с НЮ не учитываются')),
                ('T_BOiNViNP', models.PositiveSmallIntegerField(verbose_name='Терминалы КО с одновременным наличием функций БО, НВ и НП')),
                ('T_NV', models.PositiveSmallIntegerField(verbose_name='Терминалы КО не менее 2х видов операций, при этом есть НВ* (за исключением терминалов КО, указанных в предыдущем столбце)')),
                ('T_noNV', models.PositiveSmallIntegerField(verbose_name='Терминалы КО не менее 2х видов операций, при этом нет НВ')),
                ('T_BO', models.PositiveSmallIntegerField(verbose_name='Терминалы КО с одной функцией и это не НВ ')),
                ('MT_BOiNViNP', models.PositiveSmallIntegerField(verbose_name='МПКТ КО с одновременным наличием функций БО, НВ и НП')),
                ('MT_NV', models.PositiveSmallIntegerField(verbose_name='МПКТ КО не менее 2х видов операций, при этом есть НВ* (за исключением терминалов КО, указанных в предыдущем столбце)')),
                ('MT_noNV', models.PositiveSmallIntegerField(verbose_name='МПКТ КО не менее 2х видов операций, при этом нет НВ')),
                ('MT_BO', models.PositiveSmallIntegerField(verbose_name='МПКТ КО с одной функцией и это не НВ ')),
                ('KBPA', models.PositiveSmallIntegerField(verbose_name='Кассы БПА (субагентов), которые не были учтены как терминалы')),
                ('MFO', models.PositiveSmallIntegerField(verbose_name='Подразделения микрофинансовых организаций')),
                ('KPK', models.PositiveSmallIntegerField(verbose_name='Подразделения кредитных потребительских кооперативов')),
                ('SKPK', models.PositiveSmallIntegerField(verbose_name='Подразделения сельскохозяйственных кредитных потребительских кооперативов ')),
                ('SSD', models.PositiveSmallIntegerField(verbose_name='Подразделения субъектов страхового дела')),
                ('I2G', models.PositiveSmallIntegerField(verbose_name='2G (GSM), 1-да, 0 - нет')),
                ('I3G', models.PositiveSmallIntegerField(verbose_name='3G (UMTS), 1-да, 0 - нет')),
                ('I4G', models.PositiveSmallIntegerField(verbose_name='4G (LTE), 1-да, 0 - нет')),
                ('INTN', models.PositiveSmallIntegerField(verbose_name='Скорость передачи данных не менее 2048 Кб/с для неподвижных объектов, 1-да, 0 - нет')),
                ('Time', models.PositiveSmallIntegerField(verbose_name='Время, затрачиваемое на поездку общественным или личным транспортом из центра населенного пункта до ближайшего стационарного подразделения кредитной организации без учета затруднений, которые могут возникнуть в пути, мин')),
                ('Time1', models.PositiveSmallIntegerField(verbose_name='Время, затрачиваемое на поездку общественным или личным транспортом из центра населенного пункта до ближайшего банкомата с функцией выдачи наличных без учета затруднений, которые могут возникнуть в пути, мин')),
                ('CHNS', models.PositiveIntegerField(help_text='Численность населения субъекта', verbose_name='Население субъекта')),
                ('SM', models.PositiveIntegerField(help_text='Площадь субъекта, км2', verbose_name='Площадь субъекта')),
                ('PS', models.PositiveIntegerField(help_text='Плотность субъекта (чел/км2)', verbose_name='Плотность субъекта (чел/км2)')),
                ('SMRF', models.PositiveIntegerField(help_text='Площадь РФ, км2', verbose_name='Площадь РФ')),
                ('PR', models.PositiveIntegerField(verbose_name='Плотность РФ (чел/км2)')),
                ('F', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Коэффициент финансовой доступности')),
                ('TNP', models.TextField(help_text='Плотность субъекта (чел/км2)', verbose_name='ОКТМО')),
                ('F_NP', models.TextField(help_text='Значение F населенного пункта с более высоким коэффициентом F, находящегося не более чем в 2 км от данного, в случае наличия беспрепятственного доступа к нему  пешком в течение не более чем за 20 минут (заполняется для населенных пунктов, в которых F пр < 46%)', verbose_name='F_NP')),
                ('F_TD', models.PositiveIntegerField(help_text='Наличие в населенном пункте точки доступа к финансовым услугам (компьютер с выходом в интернет), 1- да, 0 - нет (заполняется для населенных пунктов, в которых F пр < 46%); учитывается если F_NP=0  в данном НП или рядом отсутстуют офисы или банкоматы с НВ', verbose_name='F_TD')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='region_subject', to='core.mo', verbose_name='Субъект РФ')),
            ],
        ),
    ]
